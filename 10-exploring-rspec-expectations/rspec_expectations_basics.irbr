>> require 'rspec/expectations'
=> true
>> include RSpec::Matchers
=> Object

>> expect(1).to eq(1)
=> true
>> expect(1).to eq(2)
RSpec::Expectations::ExpectationNotMetError: 
expected: 2
     got: 1

(compared using ==)

    <literal:elide> backtrace truncated </literal:elide>

>> expect_one = expect(1)
=> #<RSpec::Expectations::ExpectationTarget:0x007ff4649ffa50 @target=1>

>> be_one = eq(1)
=> #<RSpec::Matchers::BuiltIn::Eq:0x007ff4649fcbe8 @expected=1>

>> expect_one.to(be_one)
=> true
>> expect_one.not_to(be_one)
RSpec::Expectations::ExpectationNotMetError: 
expected: value != 1
     got: 1

(compared using ==)

    <literal:elide> backtrace truncated </literal:elide>

>> expect(1).not_to eq(2)
=> true
>> expect(1).to_not eq(2)
=> true

>> server = Object.new
=> #<Object:0x007ff4633810f8>

>> def server.booted?
>>   false
>> end
=> :booted?

>> expect(server.booted?).to eq(true)
RSpec::Expectations::ExpectationNotMetError: 
expected: true
     got: false

(compared using ==)

    <literal:elide> backtrace truncated </literal:elide>

>> expect(server.booted?).to eq(true), 'expected server to have booted'
RSpec::Expectations::ExpectationNotMetError: expected server to have booted
    <literal:elide> backtrace truncated </literal:elide>

>> expect(server.booted?).to eq(true), -> { 'not booted' }
RSpec::Expectations::ExpectationNotMetError: not booted
    <literal:elide> backtrace truncated </literal:elide>
